@model IEnumerable<TCS.EF.Entidades.ProductionHistory>
@{
    ViewData["Title"] = SharedLocalizer["productionsummary"].ToString();
    ViewData["PageName"] = "weaving_generalproduction";
    ViewData["Heading"] = "<i class='subheader-icon fal fa-chart-area'></i>" + SharedLocalizer["productionsummary"].ToString();

}

@section HeadBlock {
    <link rel="stylesheet" media="screen, print" href="~/css/formplugins/bootstrap-datepicker/bootstrap-datepicker.css">
    <link rel="stylesheet" media="screen, print" href="~/css/datagrid/datatables/datatables.bundle.css">
    <link rel="stylesheet" href="~/css/flatpickr/flatpickr.min.css">
}
<head>
</head>

<div class="flex-container">
    <div class="flex-item">
        <label style="font-size: 20px;" class="control-label">@SharedLocalizer["shift"] :</label>
        <select id="select-shift" class="form-control select-custom-filter" asp-items="ViewBag.ShiftLetter"></select>
    </div>
    <div class="flex-item">
        <label style="font-size: 20px;" class="control-label">@SharedLocalizer["startdate"] :</label>
        <input id="input-date-since" type="date" class="form-control" name="date" value="@ViewBag.Since">
    </div>
    <div class="flex-item">
        <label style="font-size: 20px;" class="control-label">@SharedLocalizer["enddate"] :</label>
        <input id="input-date-until" type="date" class="form-control" name="date" value="@ViewBag.Until">
    </div>
</div>

<div class="panel">
    <div class="grid-container-header">
        <div>
        </div>
        <div>
            <button class="btn btn-primary p-2" id="button-export-excel">
                @SharedLocalizer["exporttoexcel"]
            </button>
        </div>
        <div class="panel-toolbar">
            <button class="btn btn-panel" data-action="panel-fullscreen" data-toggle="tooltip" data-offset="0,10" data-original-title="Fullscreen"></button>
        </div>
    </div>
    <div class="panel-container show" style="overflow-x: scroll">
        <div class="panel-content">
            <table class="table table-bordered table-hover table-striped w-100">
                <thead class="bg-primary-500">
                    <tr class="text-center" style="font-size: 16px;">
                        <th style="vertical-align:middle">@SharedLocalizer["loom"]</th>
                        <th style="vertical-align:middle">@SharedLocalizer["type"]</th>
                        <th style="vertical-align:middle">@SharedLocalizer["running"]%</th>
                        <th style="vertical-align:middle">@SharedLocalizer["standard"]%</th>
                        <th style="vertical-align:middle">@SharedLocalizer["designA"]</th>
                        <th style="vertical-align:middle">PPC</th>
                        <th style="vertical-align:middle">@SharedLocalizer["meters"]</th>
                        <th style="vertical-align:middle">Kpicks</th>
                        <th style="vertical-align:middle">@SharedLocalizer["speed"]</th>
                        <th style="vertical-align:middle">@SharedLocalizer["warpstops"]  <br /> (@SharedLocalizer["quantity"] / @SharedLocalizer["time"])</th>
                        <th style="vertical-align:middle">@SharedLocalizer["weftstops"]  <br /> (@SharedLocalizer["quantity"] / @SharedLocalizer["time"])</th>
                        <th style="vertical-align:middle">@SharedLocalizer["otherstops"] <br /> (@SharedLocalizer["quantity"] / @SharedLocalizer["time"])</th>
                    </tr>
                </thead>
                <tbody id="tbody-general-production">
                </tbody>
            </table>
        </div>
    </div>
</div>
<style>
    .grid-container-header {
        display: grid;
        grid-template-columns: 1fr 7.8rem 1.4rem;
        padding: 0.7rem 1.1rem 0.7rem 1.1rem;
        border-bottom: 0.1em solid lightgray;
        grid-gap: 6px;
    }

    .badge-danger {
        background-color: red
    }

    .badge-success {
        background-color: forestgreen
    }

    #tbody-general-production {
        font-size: 1.1em;
    }

    .flex-item {
        margin: 0.5em;
        /*flex:1 0 auto;*/
        min-width: 320px;
    }

    .flex-container {
        background: white;
        margin-bottom: 2em;
        padding: 0.5em;
    }

    @@media screen and (min-width:480px) {
        .flex-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: flex-start;
        }

        .flex-item {
            flex: 0 1 calc(50% - 1rem);
        }
    }

    @@media screen and (min-width:768px) {
        .flex-item {
            flex: 0 1 calc(33% - 1rem);
        }
    }

    @@media screen and (min-width:1024px) {
        .flex-item {
            flex: 0 1 calc(33% - 1rem);
        }
    }
</style>
@section ScriptsBlock
{
    <script src="~/js/formplugins/bootstrap-datepicker/bootstrap-datepicker.js"></script>
    <script src="~/js/formplugins/bootstrap-datepicker/bootstrap-datepicker.es.js"></script>
    <script src="~/js/datagrid/datatables/datatables.bundle.js"></script>
    <script src="~/js/datagrid/datatables/datatables.export.js"></script>
    <script src="~/js/flatpickr/flatpickr.min.js"></script>

    @{ if (System.Threading.Thread.CurrentThread.CurrentCulture.Name == "es")
        {
            <script src="~/js/datagrid/datatables/datatables.bundle.es.js"></script>
            <script src="~/js/flatpickr/languaje/es.js"></script>
        }
    }

<script>
    const selectShift = document.querySelector('#select-shift');
    const inputDateSince = document.querySelector('#input-date-since');
    const inputDateUntil = document.querySelector('#input-date-until');
    const datosBusqueda =
    {
        fechaSince: '',
        fechaUntil: '',
        turno: ''
    }

    eventListeners();

    flatpickr(inputDateSince, {
        locale: "es",
        altFormat: "d-m-Y",
        altInput: true,
        altInputClass: "flatpickr-custom form-control",
    });

    flatpickr(inputDateUntil, {
        locale: "es",
        altFormat: "d-m-Y",
        altInput: true,
        altInputClass: "flatpickr-custom form-control",
    });

    function eventListeners()
    {
        inputDateSince.valueAsDate = new Date('@Html.Raw(ViewBag.Since)');
        inputDateUntil.valueAsDate = new Date('@Html.Raw(ViewBag.Until)');
        selectShift.value ='@Html.Raw(ViewBag.Shift)';
        datosBusqueda.turno = selectShift.value;
        datosBusqueda.fechaSince = inputDateSince.value;
        datosBusqueda.fechaUntil = inputDateUntil.value;
        selectShift.addEventListener('input', buscarTurno);
        inputDateSince.addEventListener('input', buscarFechaSince);
        inputDateUntil.addEventListener('input', buscarFechaUntil);
        document.addEventListener('DOMContentLoaded', busquedaInicial);
        document.querySelector('#button-export-excel').addEventListener('click', ExportarExcel);
    }

    function buscarTurno(e) {
        datosBusqueda.turno = e.target.value;
        cargarTabla();
    }

    function buscarFechaSince(e) {
        datosBusqueda.fechaSince = e.target.value;
        cargarTabla();
    }

    function buscarFechaUntil(e) {
        datosBusqueda.fechaUntil = e.target.value;
        cargarTabla();
    }

    function busquedaInicial(e) {
        cargarTabla();
    }

    function ExportarExcel() {
        let url = `Weaving/GeneralProductionToExcel?since=${datosBusqueda.fechaSince}&until=${datosBusqueda.fechaUntil}&shift=${datosBusqueda.turno}`;
        window.location.href = url;
    }

    async function cargarTabla(data) {
        const tbodyGeneralProduction = document.querySelector('#tbody-general-production');
        let url = "Weaving/GeneralProductionJson?since=" + datosBusqueda.fechaSince + "&until=" + datosBusqueda.fechaUntil + "&shift=" + datosBusqueda.turno;
        const respuesta = await fetch(url);
        const resultado = await respuesta.json();

        let html = '';
        let effColorClass = "";
        let pEffColorClass = "";

        resultado.forEach(data => {

            if (data.actualEff <= 30) {
                effColorClass = "badge badge-danger";
            }
            else if (data.actualEff > 30 && data.actualEff < 70) {
                effColorClass = "badge badge-warning";
            }
            else if (data.actualEff >= 70) {
                effColorClass = "badge badge-success";
            }

            if (data.stdEff <= 30) {
                pEffColorClass = "badge badge-danger";
            }
            else if (data.stdEff > 30 && data.stdEff < 70) {
                pEffColorClass = "badge badge-warning";
            }
            else if (data.stdEff >= 70) {
                pEffColorClass = "badge badge-success";
            }

            html += `<tr style="font-size: 15px; cursor: pointer;" onclick="GoMonitor(loomId = ${data.loomId})">
                        <td> ${data.loom.loomNumber}</td>
                        <td class="text-center" style="width:11%;"><strong>${data.loom.loomType.description}</strong></td>
                        <td class="text-right"><span class="badge ${effColorClass}">${data.actualEff.toFixed(1)}%</span></td>
                        <td class="text-right"><span class="badge ${pEffColorClass}">${data.stdEff.toFixed(1)}%</span></td>
                        <td class="text-center">${(data.article) ? data.article : ""}</td>
                        <td class="text-right">${data.ppc.toFixed(1)}</td>
                        <td class="text-right">${data.lenght/100}</td>
                        <td class="text-right">${(data.picks/1000).toFixed(1)}</td>
                        <td class="text-right">${data.speed}</td>
                        <td class="text-center"><span class="badge badge-info">${data.warpStops}</span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ${secondsToHoursMin(data.warpStopTime)}</td>
                        <td class="text-center"><span class="badge badge-info">${data.weftStops}</span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ${secondsToHoursMin(data.weftStopTime)}</td>
                        <td class="text-center"><span class="badge badge-info">${data.otherStops}</span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ${secondsToHoursMin(data.otherStopTime)}</td>
                    </tr>`;

        });

        tbodyGeneralProduction.innerHTML = html;
    }

    function GoMonitor(loomId)
    {
        let url = `Weaving/LoomMonitor?loomId=${loomId}`;
        window.location.href = url;
    }

    function secondsToHoursMin(seconds)
    {
        const hours = Math.floor(seconds / 60 / 60);

        const minutes = Math.floor(seconds / 60) - (hours * 60);

        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
    }
</script>
    <script>
        $(document).ready(function () {
            // initialize datatable
            $('#dt-basic-example').dataTable({
                responsive: true,
                lengthChange: false,
                fixedHeader: true,
                ordering: false,
                pageLength: 60,
                searching: false,
                dom:
                    "<'row mb-3'<'col-sm-12 col-md-6 d-flex align-items-center justify-content-start'f><'col-sm-12 col-md-6 d-flex align-items-center justify-content-end'lB>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
                buttons: [
                    {
                        extend: 'pdfHtml5',
                        text: 'PDF',
                        titleAttr: 'Generate PDF',
                        className: 'btn-outline-danger btn-sm mr-1'
                    },
                    {
                        extend: 'excelHtml5',
                        text: 'Excel',
                        titleAttr: 'Generate Excel',
                        className: 'btn-outline-success btn-sm mr-1'
                    },
                    {
                        extend: 'print',
                        text: 'Print',
                        titleAttr: 'Print Table',
                        className: 'btn-outline-primary btn-sm'
                    }
                ]
            });
        });

        	var controls = {
		    leftArrow: '<i class="@(Settings.Theme.IconPrefix) fa-angle-left" style="font-size: 1.25rem"></i>',
		    rightArrow: '<i class="@(Settings.Theme.IconPrefix) fa-angle-right" style="font-size: 1.25rem"></i>'
		}

        @*$('#datepicker-2').datepicker({
            todayHighlight: true,
            orientation: "bottom left",
            templates: controls,
            format: '@System.Threading.Thread.CurrentThread.CurrentCulture.DateTimeFormat.ShortDatePattern.ToLower()',
            language: '@System.Threading.Thread.CurrentThread.CurrentCulture.Name'
        });*@
    </script>
}

