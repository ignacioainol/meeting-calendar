// <auto-generated />
using DEVTOOLS.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DEVTOOLS.EF.Migrations
{
    [DbContext(typeof(DEVTOOLSContext))]
    partial class DEVTOOLSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DEVTOOLS.EF.Entidades.Column", b =>
                {
                    b.Property<int>("ColumnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColumnId"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ColumnDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ColumnForeignKey")
                        .HasColumnType("bit");

                    b.Property<int>("ColumnIndex")
                        .HasColumnType("int");

                    b.Property<string>("ColumnName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ColumnParentForeignKey")
                        .HasColumnType("int");

                    b.Property<bool>("ColumnPrimaryKey")
                        .HasColumnType("bit");

                    b.Property<int>("ColumnType")
                        .HasColumnType("int");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.HasKey("ColumnId");

                    b.HasIndex("EntityId");

                    b.ToTable("Column");
                });

            modelBuilder.Entity("DEVTOOLS.EF.Entidades.ColumnTemplate", b =>
                {
                    b.Property<int>("ColumnTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColumnTemplateId"), 1L, 1);

                    b.Property<int>("ColumnId")
                        .HasColumnType("int");

                    b.Property<string>("ColumnTemplateContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnTemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnTemplateObservations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ColumnTemplateSourceCodeType")
                        .HasColumnType("int");

                    b.HasKey("ColumnTemplateId");

                    b.HasIndex("ColumnId");

                    b.ToTable("ColumnTemplate");
                });

            modelBuilder.Entity("DEVTOOLS.EF.Entidades.DatabaseSource", b =>
                {
                    b.Property<int>("DatabaseSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DatabaseSourceId"), 1L, 1);

                    b.Property<string>("DatabaseSourceDNS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatabaseSourceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DatabaseSourceType")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("DatabaseSourceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("DatabaseSource");
                });

            modelBuilder.Entity("DEVTOOLS.EF.Entidades.Entity", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityProjectDatabaseSourceId")
                        .HasColumnType("int");

                    b.Property<string>("EntityTableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("EntityId");

                    b.HasIndex("EntityProjectDatabaseSourceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Entity");
                });

            modelBuilder.Entity("DEVTOOLS.EF.Entidades.EntityTemplate", b =>
                {
                    b.Property<int>("EntityTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityTemplateId"), 1L, 1);

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityTemplateContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityTemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityTemplateObservations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityTemplateSourceCodeType")
                        .HasColumnType("int");

                    b.HasKey("EntityTemplateId");

                    b.HasIndex("EntityId");

                    b.ToTable("EntityTemplate");
                });

            modelBuilder.Entity("DEVTOOLS.EF.Entidades.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"), 1L, 1);

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("DEVTOOLS.EF.Entidades.ProjectTemplate", b =>
                {
                    b.Property<int>("ProjectTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectTemplateId"), 1L, 1);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectTemplateContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectTemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectTemplateObservations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectTemplateSourceCodeType")
                        .HasColumnType("int");

                    b.HasKey("ProjectTemplateId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTemplate");
                });

            modelBuilder.Entity("DEVTOOLS.EF.Entidades.Column", b =>
                {
                    b.HasOne("DEVTOOLS.EF.Entidades.Entity", "Entity")
                        .WithMany("EntityColumns")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("DEVTOOLS.EF.Entidades.ColumnTemplate", b =>
                {
                    b.HasOne("DEVTOOLS.EF.Entidades.Column", "Column")
                        .WithMany("ColumnTemplates")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Column");
                });

            modelBuilder.Entity("DEVTOOLS.EF.Entidades.DatabaseSource", b =>
                {
                    b.HasOne("DEVTOOLS.EF.Entidades.Project", "Project")
                        .WithMany("ProjectDatabaseSources")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DEVTOOLS.EF.Entidades.Entity", b =>
                {
                    b.HasOne("DEVTOOLS.EF.Entidades.DatabaseSource", "EntityProjectDatabaseSource")
                        .WithMany()
                        .HasForeignKey("EntityProjectDatabaseSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEVTOOLS.EF.Entidades.Project", "Project")
                        .WithMany("ProjectEntities")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityProjectDatabaseSource");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DEVTOOLS.EF.Entidades.EntityTemplate", b =>
                {
                    b.HasOne("DEVTOOLS.EF.Entidades.Entity", "Entity")
                        .WithMany("EntityTemplates")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("DEVTOOLS.EF.Entidades.ProjectTemplate", b =>
                {
                    b.HasOne("DEVTOOLS.EF.Entidades.Project", "Project")
                        .WithMany("ProjectTemplates")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DEVTOOLS.EF.Entidades.Column", b =>
                {
                    b.Navigation("ColumnTemplates");
                });

            modelBuilder.Entity("DEVTOOLS.EF.Entidades.Entity", b =>
                {
                    b.Navigation("EntityColumns");

                    b.Navigation("EntityTemplates");
                });

            modelBuilder.Entity("DEVTOOLS.EF.Entidades.Project", b =>
                {
                    b.Navigation("ProjectDatabaseSources");

                    b.Navigation("ProjectEntities");

                    b.Navigation("ProjectTemplates");
                });
#pragma warning restore 612, 618
        }
    }
}
